Terminals unused in grammar

   V_STRING
   V_BOOLEAN
   V_CHAR
   CONST
   AND
   OR
   IF
   ELSIF
   ELSE
   DO
   WHILE
   FOR
   NE
   EQ
   GE
   LE
   GT
   LT


Grammar

    0 $accept: prog $end

    1 $@1: /* empty */

    2 prog: EXL ID $@1 body

    3 body: func_main
    4     | decls func_main
    5     | funcs func_main
    6     | decls funcs func_main

    7 decls: decl SEMI
    8      | decl SEMI decls

    9 $@2: /* empty */

   10 $@3: /* empty */

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K

   12 $@4: /* empty */

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type L_K stmts R_K

   14 func_call: ID L_P termlist R_P

   15 stmts: stmt SEMI
   16      | stmt SEMI stmts

   17 stmt: return
   18     | decl
   19     | assign
   20     | print

   21 decl: type idlist

   22 params: param
   23       | param COMMA params

   24 param: type ID

   25 result_type: type
   26            | VOID

   27 type: NUMBER
   28     | STRING
   29     | CHAR
   30     | BOOLEAN

   31 idlist: ID
   32       | ID COMMA idlist

   33 return: RETURN expr

   34 assign: ID ASSIGN expr

   35 expr: term
   36     | term op term
   37     | func_call

   38 op: PLUS
   39   | MINUS
   40   | DIVIDE
   41   | MULTY
   42   | PERCENT
   43   | EXP

   44 termlist: term
   45         | term COMMA termlist

   46 term: ID
   47     | V_NUMBER

   48 print_param: expr

   49 print: PRINT L_P print_param R_P SEMI


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 2 11 14 24 31 32 34 46
V_STRING (259)
V_BOOLEAN (260)
V_CHAR (261)
V_NUMBER (262) 47
CONST (263)
VOID (264) 26
FUNCTION (265) 11 13
MAIN (266) 13
AND (267)
OR (268)
NUMBER (269) 27
STRING (270) 28
CHAR (271) 29
BOOLEAN (272) 30
IF (273)
ELSIF (274)
ELSE (275)
DO (276)
WHILE (277)
FOR (278)
ASSIGN (279) 34
PLUS (280) 38
MINUS (281) 39
DIVIDE (282) 40
MULTY (283) 41
PERCENT (284) 42
EXP (285) 43
NE (286)
EQ (287)
GE (288)
LE (289)
GT (290)
LT (291)
RETURN (292) 33
EXL (293) 2
L_K (294) 11 13
R_K (295) 11 13
L_P (296) 11 13 14 49
R_P (297) 11 13 14 49
COLON (298) 11 13
SEMI (299) 7 8 15 16 49
COMMA (300) 23 32 45
PRINT (301) 49


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
prog (48)
    on left: 2, on right: 0
$@1 (49)
    on left: 1, on right: 2
body (50)
    on left: 3 4 5 6, on right: 2
decls (51)
    on left: 7 8, on right: 4 6 8
funcs (52)
    on left: 11, on right: 5 6
$@2 (53)
    on left: 9, on right: 11
$@3 (54)
    on left: 10, on right: 11
func_main (55)
    on left: 13, on right: 3 4 5 6
$@4 (56)
    on left: 12, on right: 13
func_call (57)
    on left: 14, on right: 37
stmts (58)
    on left: 15 16, on right: 11 13 16
stmt (59)
    on left: 17 18 19 20, on right: 15 16
decl (60)
    on left: 21, on right: 7 8 18
params (61)
    on left: 22 23, on right: 11 13 23
param (62)
    on left: 24, on right: 22 23
result_type (63)
    on left: 25 26, on right: 11
type (64)
    on left: 27 28 29 30, on right: 13 21 24 25
idlist (65)
    on left: 31 32, on right: 21 32
return (66)
    on left: 33, on right: 17
assign (67)
    on left: 34, on right: 19
expr (68)
    on left: 35 36 37, on right: 33 34 48
op (69)
    on left: 38 39 40 41 42 43, on right: 36
termlist (70)
    on left: 44 45, on right: 14 45
term (71)
    on left: 46 47, on right: 35 36 44 45
print_param (72)
    on left: 48, on right: 49
print (73)
    on left: 49, on right: 20


state 0

    0 $accept: . prog $end

    EXL  shift, and go to state 1

    prog  go to state 2


state 1

    2 prog: EXL . ID $@1 body

    ID  shift, and go to state 3


state 2

    0 $accept: prog . $end

    $end  shift, and go to state 4


state 3

    2 prog: EXL ID . $@1 body

    $default  reduce using rule 1 ($@1)

    $@1  go to state 5


state 4

    0 $accept: prog $end .

    $default  accept


state 5

    2 prog: EXL ID $@1 . body

    FUNCTION  shift, and go to state 6
    NUMBER    shift, and go to state 7
    STRING    shift, and go to state 8
    CHAR      shift, and go to state 9
    BOOLEAN   shift, and go to state 10

    body       go to state 11
    decls      go to state 12
    funcs      go to state 13
    func_main  go to state 14
    decl       go to state 15
    type       go to state 16


state 6

   11 funcs: FUNCTION . ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K
   13 func_main: FUNCTION . MAIN $@4 L_P params R_P COLON type L_K stmts R_K

    ID    shift, and go to state 17
    MAIN  shift, and go to state 18


state 7

   27 type: NUMBER .

    $default  reduce using rule 27 (type)


state 8

   28 type: STRING .

    $default  reduce using rule 28 (type)


state 9

   29 type: CHAR .

    $default  reduce using rule 29 (type)


state 10

   30 type: BOOLEAN .

    $default  reduce using rule 30 (type)


state 11

    2 prog: EXL ID $@1 body .

    $default  reduce using rule 2 (prog)


state 12

    4 body: decls . func_main
    6     | decls . funcs func_main

    FUNCTION  shift, and go to state 6

    funcs      go to state 19
    func_main  go to state 20


state 13

    5 body: funcs . func_main

    FUNCTION  shift, and go to state 21

    func_main  go to state 22


state 14

    3 body: func_main .

    $default  reduce using rule 3 (body)


state 15

    7 decls: decl . SEMI
    8      | decl . SEMI decls

    SEMI  shift, and go to state 23


state 16

   21 decl: type . idlist

    ID  shift, and go to state 24

    idlist  go to state 25


state 17

   11 funcs: FUNCTION ID . $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K

    $default  reduce using rule 9 ($@2)

    $@2  go to state 26


state 18

   13 func_main: FUNCTION MAIN . $@4 L_P params R_P COLON type L_K stmts R_K

    $default  reduce using rule 12 ($@4)

    $@4  go to state 27


state 19

    6 body: decls funcs . func_main

    FUNCTION  shift, and go to state 21

    func_main  go to state 28


state 20

    4 body: decls func_main .

    $default  reduce using rule 4 (body)


state 21

   13 func_main: FUNCTION . MAIN $@4 L_P params R_P COLON type L_K stmts R_K

    MAIN  shift, and go to state 18


state 22

    5 body: funcs func_main .

    $default  reduce using rule 5 (body)


state 23

    7 decls: decl SEMI .
    8      | decl SEMI . decls

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    $default  reduce using rule 7 (decls)

    decls  go to state 29
    decl   go to state 15
    type   go to state 16


state 24

   31 idlist: ID .
   32       | ID . COMMA idlist

    COMMA  shift, and go to state 30

    $default  reduce using rule 31 (idlist)


state 25

   21 decl: type idlist .

    $default  reduce using rule 21 (decl)


state 26

   11 funcs: FUNCTION ID $@2 . L_P params $@3 R_P COLON result_type L_K stmts R_K

    L_P  shift, and go to state 31


state 27

   13 func_main: FUNCTION MAIN $@4 . L_P params R_P COLON type L_K stmts R_K

    L_P  shift, and go to state 32


state 28

    6 body: decls funcs func_main .

    $default  reduce using rule 6 (body)


state 29

    8 decls: decl SEMI decls .

    $default  reduce using rule 8 (decls)


state 30

   32 idlist: ID COMMA . idlist

    ID  shift, and go to state 24

    idlist  go to state 33


state 31

   11 funcs: FUNCTION ID $@2 L_P . params $@3 R_P COLON result_type L_K stmts R_K

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    params  go to state 34
    param   go to state 35
    type    go to state 36


state 32

   13 func_main: FUNCTION MAIN $@4 L_P . params R_P COLON type L_K stmts R_K

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    params  go to state 37
    param   go to state 35
    type    go to state 36


state 33

   32 idlist: ID COMMA idlist .

    $default  reduce using rule 32 (idlist)


state 34

   11 funcs: FUNCTION ID $@2 L_P params . $@3 R_P COLON result_type L_K stmts R_K

    $default  reduce using rule 10 ($@3)

    $@3  go to state 38


state 35

   22 params: param .
   23       | param . COMMA params

    COMMA  shift, and go to state 39

    $default  reduce using rule 22 (params)


state 36

   24 param: type . ID

    ID  shift, and go to state 40


state 37

   13 func_main: FUNCTION MAIN $@4 L_P params . R_P COLON type L_K stmts R_K

    R_P  shift, and go to state 41


state 38

   11 funcs: FUNCTION ID $@2 L_P params $@3 . R_P COLON result_type L_K stmts R_K

    R_P  shift, and go to state 42


state 39

   23 params: param COMMA . params

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    params  go to state 43
    param   go to state 35
    type    go to state 36


state 40

   24 param: type ID .

    $default  reduce using rule 24 (param)


state 41

   13 func_main: FUNCTION MAIN $@4 L_P params R_P . COLON type L_K stmts R_K

    COLON  shift, and go to state 44


state 42

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P . COLON result_type L_K stmts R_K

    COLON  shift, and go to state 45


state 43

   23 params: param COMMA params .

    $default  reduce using rule 23 (params)


state 44

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON . type L_K stmts R_K

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    type  go to state 46


state 45

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON . result_type L_K stmts R_K

    VOID     shift, and go to state 47
    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    result_type  go to state 48
    type         go to state 49


state 46

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type . L_K stmts R_K

    L_K  shift, and go to state 50


state 47

   26 result_type: VOID .

    $default  reduce using rule 26 (result_type)


state 48

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type . L_K stmts R_K

    L_K  shift, and go to state 51


state 49

   25 result_type: type .

    $default  reduce using rule 25 (result_type)


state 50

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type L_K . stmts R_K

    ID       shift, and go to state 52
    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10
    RETURN   shift, and go to state 53
    PRINT    shift, and go to state 54

    stmts   go to state 55
    stmt    go to state 56
    decl    go to state 57
    type    go to state 16
    return  go to state 58
    assign  go to state 59
    print   go to state 60


state 51

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K . stmts R_K

    ID       shift, and go to state 52
    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10
    RETURN   shift, and go to state 53
    PRINT    shift, and go to state 54

    stmts   go to state 61
    stmt    go to state 56
    decl    go to state 57
    type    go to state 16
    return  go to state 58
    assign  go to state 59
    print   go to state 60


state 52

   34 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 62


state 53

   33 return: RETURN . expr

    ID        shift, and go to state 63
    V_NUMBER  shift, and go to state 64

    func_call  go to state 65
    expr       go to state 66
    term       go to state 67


state 54

   49 print: PRINT . L_P print_param R_P SEMI

    L_P  shift, and go to state 68


state 55

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type L_K stmts . R_K

    R_K  shift, and go to state 69


state 56

   15 stmts: stmt . SEMI
   16      | stmt . SEMI stmts

    SEMI  shift, and go to state 70


state 57

   18 stmt: decl .

    $default  reduce using rule 18 (stmt)


state 58

   17 stmt: return .

    $default  reduce using rule 17 (stmt)


state 59

   19 stmt: assign .

    $default  reduce using rule 19 (stmt)


state 60

   20 stmt: print .

    $default  reduce using rule 20 (stmt)


state 61

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts . R_K

    R_K  shift, and go to state 71


state 62

   34 assign: ID ASSIGN . expr

    ID        shift, and go to state 63
    V_NUMBER  shift, and go to state 64

    func_call  go to state 65
    expr       go to state 72
    term       go to state 67


state 63

   14 func_call: ID . L_P termlist R_P
   46 term: ID .

    L_P  shift, and go to state 73

    $default  reduce using rule 46 (term)


state 64

   47 term: V_NUMBER .

    $default  reduce using rule 47 (term)


state 65

   37 expr: func_call .

    $default  reduce using rule 37 (expr)


state 66

   33 return: RETURN expr .

    $default  reduce using rule 33 (return)


state 67

   35 expr: term .
   36     | term . op term

    PLUS     shift, and go to state 74
    MINUS    shift, and go to state 75
    DIVIDE   shift, and go to state 76
    MULTY    shift, and go to state 77
    PERCENT  shift, and go to state 78
    EXP      shift, and go to state 79

    $default  reduce using rule 35 (expr)

    op  go to state 80


state 68

   49 print: PRINT L_P . print_param R_P SEMI

    ID        shift, and go to state 63
    V_NUMBER  shift, and go to state 64

    func_call    go to state 65
    expr         go to state 81
    term         go to state 67
    print_param  go to state 82


state 69

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type L_K stmts R_K .

    $default  reduce using rule 13 (func_main)


state 70

   15 stmts: stmt SEMI .
   16      | stmt SEMI . stmts

    ID       shift, and go to state 52
    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10
    RETURN   shift, and go to state 53
    PRINT    shift, and go to state 54

    $default  reduce using rule 15 (stmts)

    stmts   go to state 83
    stmt    go to state 56
    decl    go to state 57
    type    go to state 16
    return  go to state 58
    assign  go to state 59
    print   go to state 60


state 71

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K .

    $default  reduce using rule 11 (funcs)


state 72

   34 assign: ID ASSIGN expr .

    $default  reduce using rule 34 (assign)


state 73

   14 func_call: ID L_P . termlist R_P

    ID        shift, and go to state 84
    V_NUMBER  shift, and go to state 64

    termlist  go to state 85
    term      go to state 86


state 74

   38 op: PLUS .

    $default  reduce using rule 38 (op)


state 75

   39 op: MINUS .

    $default  reduce using rule 39 (op)


state 76

   40 op: DIVIDE .

    $default  reduce using rule 40 (op)


state 77

   41 op: MULTY .

    $default  reduce using rule 41 (op)


state 78

   42 op: PERCENT .

    $default  reduce using rule 42 (op)


state 79

   43 op: EXP .

    $default  reduce using rule 43 (op)


state 80

   36 expr: term op . term

    ID        shift, and go to state 84
    V_NUMBER  shift, and go to state 64

    term  go to state 87


state 81

   48 print_param: expr .

    $default  reduce using rule 48 (print_param)


state 82

   49 print: PRINT L_P print_param . R_P SEMI

    R_P  shift, and go to state 88


state 83

   16 stmts: stmt SEMI stmts .

    $default  reduce using rule 16 (stmts)


state 84

   46 term: ID .

    $default  reduce using rule 46 (term)


state 85

   14 func_call: ID L_P termlist . R_P

    R_P  shift, and go to state 89


state 86

   44 termlist: term .
   45         | term . COMMA termlist

    COMMA  shift, and go to state 90

    $default  reduce using rule 44 (termlist)


state 87

   36 expr: term op term .

    $default  reduce using rule 36 (expr)


state 88

   49 print: PRINT L_P print_param R_P . SEMI

    SEMI  shift, and go to state 91


state 89

   14 func_call: ID L_P termlist R_P .

    $default  reduce using rule 14 (func_call)


state 90

   45 termlist: term COMMA . termlist

    ID        shift, and go to state 84
    V_NUMBER  shift, and go to state 64

    termlist  go to state 92
    term      go to state 86


state 91

   49 print: PRINT L_P print_param R_P SEMI .

    $default  reduce using rule 49 (print)


state 92

   45 termlist: term COMMA termlist .

    $default  reduce using rule 45 (termlist)
