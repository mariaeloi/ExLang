Terminals unused in grammar

   V_STRING
   V_BOOLEAN
   STRING
   CHAR
   BOOLEAN
   V_CHAR
   CONST
   VOID
   AND
   OR
   IF
   ELSIF
   ELSE
   DO
   WHILE
   FOR
   DIVIDE
   MULTY
   PERCENT
   NE
   EQ
   GE
   LE
   GT
   LT


Grammar

    0 $accept: prog $end

    1 $@1: /* empty */

    2 prog: $@1 body

    3 body: func_main
    4     | decls func_main
    5     | funcs func_main
    6     | decls funcs func_main

    7 decls: decl SEMI
    8      | decl SEMI decls

    9 params: param
   10       | param COMMA params

   11 funcs: FUNCTION ID L_P params R_P COLON type L_K stmts R_K

   12 $@2: /* empty */

   13 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type L_K stmts R_K

   14 $@3: /* empty */

   15 func_call: ID $@3 L_P termlist R_P

   16 stmts: stmt SEMI
   17      | stmt SEMI stmts

   18 stmt: return
   19     | decl
   20     | assign

   21 decl: type idlist

   22 param: type ID

   23 type: NUMBER

   24 idlist: ID
   25       | ID COMMA idlist

   26 return: RETURN expr

   27 assign: ID ASSIGN expr

   28 expr: term
   29     | ID op ID
   30     | func_call

   31 op: PLUS
   32   | MINUS

   33 termlist: term
   34         | term COMMA termlist

   35 term: ID
   36     | V_NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 11 15 22 24 25 27 29 35
V_STRING (259)
V_BOOLEAN (260)
NUMBER (261) 23
STRING (262)
CHAR (263)
BOOLEAN (264)
V_CHAR (265)
V_NUMBER (266) 36
CONST (267)
VOID (268)
FUNCTION (269) 11 13
MAIN (270) 13
AND (271)
OR (272)
IF (273)
ELSIF (274)
ELSE (275)
DO (276)
WHILE (277)
FOR (278)
ASSIGN (279) 27
PLUS (280) 31
MINUS (281) 32
DIVIDE (282)
MULTY (283)
PERCENT (284)
NE (285)
EQ (286)
GE (287)
LE (288)
GT (289)
LT (290)
RETURN (291) 26
L_K (292) 11 13
R_K (293) 11 13
L_P (294) 11 13 15
R_P (295) 11 13 15
COLON (296) 11 13
SEMI (297) 7 8 16 17
COMMA (298) 10 25 34


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
prog (45)
    on left: 2, on right: 0
$@1 (46)
    on left: 1, on right: 2
body (47)
    on left: 3 4 5 6, on right: 2
decls (48)
    on left: 7 8, on right: 4 6 8
params (49)
    on left: 9 10, on right: 10 11 13
funcs (50)
    on left: 11, on right: 5 6
func_main (51)
    on left: 13, on right: 3 4 5 6
$@2 (52)
    on left: 12, on right: 13
func_call (53)
    on left: 15, on right: 30
$@3 (54)
    on left: 14, on right: 15
stmts (55)
    on left: 16 17, on right: 11 13 17
stmt (56)
    on left: 18 19 20, on right: 16 17
decl (57)
    on left: 21, on right: 7 8 19
param (58)
    on left: 22, on right: 9 10
type (59)
    on left: 23, on right: 11 13 21 22
idlist (60)
    on left: 24 25, on right: 21 25
return (61)
    on left: 26, on right: 18
assign (62)
    on left: 27, on right: 20
expr (63)
    on left: 28 29 30, on right: 26 27
op (64)
    on left: 31 32, on right: 29
termlist (65)
    on left: 33 34, on right: 15 34
term (66)
    on left: 35 36, on right: 28 33 34


state 0

    0 $accept: . prog $end

    $default  reduce using rule 1 ($@1)

    prog  go to state 1
    $@1   go to state 2


state 1

    0 $accept: prog . $end

    $end  shift, and go to state 3


state 2

    2 prog: $@1 . body

    NUMBER    shift, and go to state 4
    FUNCTION  shift, and go to state 5

    body       go to state 6
    decls      go to state 7
    funcs      go to state 8
    func_main  go to state 9
    decl       go to state 10
    type       go to state 11


state 3

    0 $accept: prog $end .

    $default  accept


state 4

   23 type: NUMBER .

    $default  reduce using rule 23 (type)


state 5

   11 funcs: FUNCTION . ID L_P params R_P COLON type L_K stmts R_K
   13 func_main: FUNCTION . MAIN $@2 L_P params R_P COLON type L_K stmts R_K

    ID    shift, and go to state 12
    MAIN  shift, and go to state 13


state 6

    2 prog: $@1 body .

    $default  reduce using rule 2 (prog)


state 7

    4 body: decls . func_main
    6     | decls . funcs func_main

    FUNCTION  shift, and go to state 5

    funcs      go to state 14
    func_main  go to state 15


state 8

    5 body: funcs . func_main

    FUNCTION  shift, and go to state 16

    func_main  go to state 17


state 9

    3 body: func_main .

    $default  reduce using rule 3 (body)


state 10

    7 decls: decl . SEMI
    8      | decl . SEMI decls

    SEMI  shift, and go to state 18


state 11

   21 decl: type . idlist

    ID  shift, and go to state 19

    idlist  go to state 20


state 12

   11 funcs: FUNCTION ID . L_P params R_P COLON type L_K stmts R_K

    L_P  shift, and go to state 21


state 13

   13 func_main: FUNCTION MAIN . $@2 L_P params R_P COLON type L_K stmts R_K

    $default  reduce using rule 12 ($@2)

    $@2  go to state 22


state 14

    6 body: decls funcs . func_main

    FUNCTION  shift, and go to state 16

    func_main  go to state 23


state 15

    4 body: decls func_main .

    $default  reduce using rule 4 (body)


state 16

   13 func_main: FUNCTION . MAIN $@2 L_P params R_P COLON type L_K stmts R_K

    MAIN  shift, and go to state 13


state 17

    5 body: funcs func_main .

    $default  reduce using rule 5 (body)


state 18

    7 decls: decl SEMI .
    8      | decl SEMI . decls

    NUMBER  shift, and go to state 4

    $default  reduce using rule 7 (decls)

    decls  go to state 24
    decl   go to state 10
    type   go to state 11


state 19

   24 idlist: ID .
   25       | ID . COMMA idlist

    COMMA  shift, and go to state 25

    $default  reduce using rule 24 (idlist)


state 20

   21 decl: type idlist .

    $default  reduce using rule 21 (decl)


state 21

   11 funcs: FUNCTION ID L_P . params R_P COLON type L_K stmts R_K

    NUMBER  shift, and go to state 4

    params  go to state 26
    param   go to state 27
    type    go to state 28


state 22

   13 func_main: FUNCTION MAIN $@2 . L_P params R_P COLON type L_K stmts R_K

    L_P  shift, and go to state 29


state 23

    6 body: decls funcs func_main .

    $default  reduce using rule 6 (body)


state 24

    8 decls: decl SEMI decls .

    $default  reduce using rule 8 (decls)


state 25

   25 idlist: ID COMMA . idlist

    ID  shift, and go to state 19

    idlist  go to state 30


state 26

   11 funcs: FUNCTION ID L_P params . R_P COLON type L_K stmts R_K

    R_P  shift, and go to state 31


state 27

    9 params: param .
   10       | param . COMMA params

    COMMA  shift, and go to state 32

    $default  reduce using rule 9 (params)


state 28

   22 param: type . ID

    ID  shift, and go to state 33


state 29

   13 func_main: FUNCTION MAIN $@2 L_P . params R_P COLON type L_K stmts R_K

    NUMBER  shift, and go to state 4

    params  go to state 34
    param   go to state 27
    type    go to state 28


state 30

   25 idlist: ID COMMA idlist .

    $default  reduce using rule 25 (idlist)


state 31

   11 funcs: FUNCTION ID L_P params R_P . COLON type L_K stmts R_K

    COLON  shift, and go to state 35


state 32

   10 params: param COMMA . params

    NUMBER  shift, and go to state 4

    params  go to state 36
    param   go to state 27
    type    go to state 28


state 33

   22 param: type ID .

    $default  reduce using rule 22 (param)


state 34

   13 func_main: FUNCTION MAIN $@2 L_P params . R_P COLON type L_K stmts R_K

    R_P  shift, and go to state 37


state 35

   11 funcs: FUNCTION ID L_P params R_P COLON . type L_K stmts R_K

    NUMBER  shift, and go to state 4

    type  go to state 38


state 36

   10 params: param COMMA params .

    $default  reduce using rule 10 (params)


state 37

   13 func_main: FUNCTION MAIN $@2 L_P params R_P . COLON type L_K stmts R_K

    COLON  shift, and go to state 39


state 38

   11 funcs: FUNCTION ID L_P params R_P COLON type . L_K stmts R_K

    L_K  shift, and go to state 40


state 39

   13 func_main: FUNCTION MAIN $@2 L_P params R_P COLON . type L_K stmts R_K

    NUMBER  shift, and go to state 4

    type  go to state 41


state 40

   11 funcs: FUNCTION ID L_P params R_P COLON type L_K . stmts R_K

    ID      shift, and go to state 42
    NUMBER  shift, and go to state 4
    RETURN  shift, and go to state 43

    stmts   go to state 44
    stmt    go to state 45
    decl    go to state 46
    type    go to state 11
    return  go to state 47
    assign  go to state 48


state 41

   13 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type . L_K stmts R_K

    L_K  shift, and go to state 49


state 42

   27 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 50


state 43

   26 return: RETURN . expr

    ID        shift, and go to state 51
    V_NUMBER  shift, and go to state 52

    func_call  go to state 53
    expr       go to state 54
    term       go to state 55


state 44

   11 funcs: FUNCTION ID L_P params R_P COLON type L_K stmts . R_K

    R_K  shift, and go to state 56


state 45

   16 stmts: stmt . SEMI
   17      | stmt . SEMI stmts

    SEMI  shift, and go to state 57


state 46

   19 stmt: decl .

    $default  reduce using rule 19 (stmt)


state 47

   18 stmt: return .

    $default  reduce using rule 18 (stmt)


state 48

   20 stmt: assign .

    $default  reduce using rule 20 (stmt)


state 49

   13 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type L_K . stmts R_K

    ID      shift, and go to state 42
    NUMBER  shift, and go to state 4
    RETURN  shift, and go to state 43

    stmts   go to state 58
    stmt    go to state 45
    decl    go to state 46
    type    go to state 11
    return  go to state 47
    assign  go to state 48


state 50

   27 assign: ID ASSIGN . expr

    ID        shift, and go to state 51
    V_NUMBER  shift, and go to state 52

    func_call  go to state 53
    expr       go to state 59
    term       go to state 55


state 51

   15 func_call: ID . $@3 L_P termlist R_P
   29 expr: ID . op ID
   35 term: ID .

    PLUS   shift, and go to state 60
    MINUS  shift, and go to state 61

    SEMI      reduce using rule 35 (term)
    $default  reduce using rule 14 ($@3)

    $@3  go to state 62
    op   go to state 63


state 52

   36 term: V_NUMBER .

    $default  reduce using rule 36 (term)


state 53

   30 expr: func_call .

    $default  reduce using rule 30 (expr)


state 54

   26 return: RETURN expr .

    $default  reduce using rule 26 (return)


state 55

   28 expr: term .

    $default  reduce using rule 28 (expr)


state 56

   11 funcs: FUNCTION ID L_P params R_P COLON type L_K stmts R_K .

    $default  reduce using rule 11 (funcs)


state 57

   16 stmts: stmt SEMI .
   17      | stmt SEMI . stmts

    ID      shift, and go to state 42
    NUMBER  shift, and go to state 4
    RETURN  shift, and go to state 43

    $default  reduce using rule 16 (stmts)

    stmts   go to state 64
    stmt    go to state 45
    decl    go to state 46
    type    go to state 11
    return  go to state 47
    assign  go to state 48


state 58

   13 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type L_K stmts . R_K

    R_K  shift, and go to state 65


state 59

   27 assign: ID ASSIGN expr .

    $default  reduce using rule 27 (assign)


state 60

   31 op: PLUS .

    $default  reduce using rule 31 (op)


state 61

   32 op: MINUS .

    $default  reduce using rule 32 (op)


state 62

   15 func_call: ID $@3 . L_P termlist R_P

    L_P  shift, and go to state 66


state 63

   29 expr: ID op . ID

    ID  shift, and go to state 67


state 64

   17 stmts: stmt SEMI stmts .

    $default  reduce using rule 17 (stmts)


state 65

   13 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type L_K stmts R_K .

    $default  reduce using rule 13 (func_main)


state 66

   15 func_call: ID $@3 L_P . termlist R_P

    ID        shift, and go to state 68
    V_NUMBER  shift, and go to state 52

    termlist  go to state 69
    term      go to state 70


state 67

   29 expr: ID op ID .

    $default  reduce using rule 29 (expr)


state 68

   35 term: ID .

    $default  reduce using rule 35 (term)


state 69

   15 func_call: ID $@3 L_P termlist . R_P

    R_P  shift, and go to state 71


state 70

   33 termlist: term .
   34         | term . COMMA termlist

    COMMA  shift, and go to state 72

    $default  reduce using rule 33 (termlist)


state 71

   15 func_call: ID $@3 L_P termlist R_P .

    $default  reduce using rule 15 (func_call)


state 72

   34 termlist: term COMMA . termlist

    ID        shift, and go to state 68
    V_NUMBER  shift, and go to state 52

    termlist  go to state 73
    term      go to state 70


state 73

   34 termlist: term COMMA termlist .

    $default  reduce using rule 34 (termlist)
