Terminals unused in grammar

   V_BOOLEAN
   V_CHAR
   CONST
   AND
   OR
   IF
   ELSIF
   ELSE
   DO
   WHILE
   FOR
   NE
   EQ
   GE
   LE
   GT
   LT


Grammar

    0 $accept: prog $end

    1 $@1: /* empty */

    2 prog: EXL ID $@1 body

    3 body: func_main
    4     | decls func_main
    5     | funcs func_main
    6     | decls funcs func_main

    7 decls: decl SEMI
    8      | decl SEMI decls

    9 $@2: /* empty */

   10 $@3: /* empty */

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K

   12 $@4: /* empty */

   13 $@5: /* empty */

   14 func_main: FUNCTION MAIN $@4 L_P params $@5 R_P COLON type L_K stmts R_K

   15 func_call: ID L_P termlist R_P

   16 stmts: stmt SEMI
   17      | stmt SEMI stmts

   18 stmt: return
   19     | decl
   20     | assign
   21     | print

   22 decl: type idlist

   23 params: param
   24       | param COMMA params

   25 param: type ID

   26 result_type: type
   27            | VOID

   28 type: NUMBER
   29     | STRING
   30     | CHAR
   31     | BOOLEAN

   32 idlist: ID
   33       | ID COMMA idlist

   34 return: RETURN expr

   35 assign: ID ASSIGN expr

   36 expr: term
   37     | term op expr
   38     | func_call

   39 op: PLUS
   40   | MINUS
   41   | DIVIDE
   42   | MULTY
   43   | PERCENT
   44   | EXP

   45 termlist: term
   46         | term COMMA termlist

   47 term: ID
   48     | V_NUMBER

   49 print_param: V_STRING

   50 print: PRINT L_P print_param R_P


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 2 11 15 25 32 33 35 47
V_STRING (259) 49
V_BOOLEAN (260)
V_CHAR (261)
V_NUMBER (262) 48
CONST (263)
VOID (264) 27
FUNCTION (265) 11 14
MAIN (266) 14
AND (267)
OR (268)
NUMBER (269) 28
STRING (270) 29
CHAR (271) 30
BOOLEAN (272) 31
IF (273)
ELSIF (274)
ELSE (275)
DO (276)
WHILE (277)
FOR (278)
ASSIGN (279) 35
PLUS (280) 39
MINUS (281) 40
DIVIDE (282) 41
MULTY (283) 42
PERCENT (284) 43
EXP (285) 44
NE (286)
EQ (287)
GE (288)
LE (289)
GT (290)
LT (291)
RETURN (292) 34
EXL (293) 2
L_K (294) 11 14
R_K (295) 11 14
L_P (296) 11 14 15 50
R_P (297) 11 14 15 50
COLON (298) 11 14
SEMI (299) 7 8 16 17
COMMA (300) 24 33 46
PRINT (301) 50


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
prog (48)
    on left: 2, on right: 0
$@1 (49)
    on left: 1, on right: 2
body (50)
    on left: 3 4 5 6, on right: 2
decls (51)
    on left: 7 8, on right: 4 6 8
funcs (52)
    on left: 11, on right: 5 6
$@2 (53)
    on left: 9, on right: 11
$@3 (54)
    on left: 10, on right: 11
func_main (55)
    on left: 14, on right: 3 4 5 6
$@4 (56)
    on left: 12, on right: 14
$@5 (57)
    on left: 13, on right: 14
func_call (58)
    on left: 15, on right: 38
stmts (59)
    on left: 16 17, on right: 11 14 17
stmt (60)
    on left: 18 19 20 21, on right: 16 17
decl (61)
    on left: 22, on right: 7 8 19
params (62)
    on left: 23 24, on right: 11 14 24
param (63)
    on left: 25, on right: 23 24
result_type (64)
    on left: 26 27, on right: 11
type (65)
    on left: 28 29 30 31, on right: 14 22 25 26
idlist (66)
    on left: 32 33, on right: 22 33
return (67)
    on left: 34, on right: 18
assign (68)
    on left: 35, on right: 20
expr (69)
    on left: 36 37 38, on right: 34 35 37
op (70)
    on left: 39 40 41 42 43 44, on right: 37
termlist (71)
    on left: 45 46, on right: 15 46
term (72)
    on left: 47 48, on right: 36 37 45 46
print_param (73)
    on left: 49, on right: 50
print (74)
    on left: 50, on right: 21


state 0

    0 $accept: . prog $end

    EXL  shift, and go to state 1

    prog  go to state 2


state 1

    2 prog: EXL . ID $@1 body

    ID  shift, and go to state 3


state 2

    0 $accept: prog . $end

    $end  shift, and go to state 4


state 3

    2 prog: EXL ID . $@1 body

    $default  reduce using rule 1 ($@1)

    $@1  go to state 5


state 4

    0 $accept: prog $end .

    $default  accept


state 5

    2 prog: EXL ID $@1 . body

    FUNCTION  shift, and go to state 6
    NUMBER    shift, and go to state 7
    STRING    shift, and go to state 8
    CHAR      shift, and go to state 9
    BOOLEAN   shift, and go to state 10

    body       go to state 11
    decls      go to state 12
    funcs      go to state 13
    func_main  go to state 14
    decl       go to state 15
    type       go to state 16


state 6

   11 funcs: FUNCTION . ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K
   14 func_main: FUNCTION . MAIN $@4 L_P params $@5 R_P COLON type L_K stmts R_K

    ID    shift, and go to state 17
    MAIN  shift, and go to state 18


state 7

   28 type: NUMBER .

    $default  reduce using rule 28 (type)


state 8

   29 type: STRING .

    $default  reduce using rule 29 (type)


state 9

   30 type: CHAR .

    $default  reduce using rule 30 (type)


state 10

   31 type: BOOLEAN .

    $default  reduce using rule 31 (type)


state 11

    2 prog: EXL ID $@1 body .

    $default  reduce using rule 2 (prog)


state 12

    4 body: decls . func_main
    6     | decls . funcs func_main

    FUNCTION  shift, and go to state 6

    funcs      go to state 19
    func_main  go to state 20


state 13

    5 body: funcs . func_main

    FUNCTION  shift, and go to state 21

    func_main  go to state 22


state 14

    3 body: func_main .

    $default  reduce using rule 3 (body)


state 15

    7 decls: decl . SEMI
    8      | decl . SEMI decls

    SEMI  shift, and go to state 23


state 16

   22 decl: type . idlist

    ID  shift, and go to state 24

    idlist  go to state 25


state 17

   11 funcs: FUNCTION ID . $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K

    $default  reduce using rule 9 ($@2)

    $@2  go to state 26


state 18

   14 func_main: FUNCTION MAIN . $@4 L_P params $@5 R_P COLON type L_K stmts R_K

    $default  reduce using rule 12 ($@4)

    $@4  go to state 27


state 19

    6 body: decls funcs . func_main

    FUNCTION  shift, and go to state 21

    func_main  go to state 28


state 20

    4 body: decls func_main .

    $default  reduce using rule 4 (body)


state 21

   14 func_main: FUNCTION . MAIN $@4 L_P params $@5 R_P COLON type L_K stmts R_K

    MAIN  shift, and go to state 18


state 22

    5 body: funcs func_main .

    $default  reduce using rule 5 (body)


state 23

    7 decls: decl SEMI .
    8      | decl SEMI . decls

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    $default  reduce using rule 7 (decls)

    decls  go to state 29
    decl   go to state 15
    type   go to state 16


state 24

   32 idlist: ID .
   33       | ID . COMMA idlist

    COMMA  shift, and go to state 30

    $default  reduce using rule 32 (idlist)


state 25

   22 decl: type idlist .

    $default  reduce using rule 22 (decl)


state 26

   11 funcs: FUNCTION ID $@2 . L_P params $@3 R_P COLON result_type L_K stmts R_K

    L_P  shift, and go to state 31


state 27

   14 func_main: FUNCTION MAIN $@4 . L_P params $@5 R_P COLON type L_K stmts R_K

    L_P  shift, and go to state 32


state 28

    6 body: decls funcs func_main .

    $default  reduce using rule 6 (body)


state 29

    8 decls: decl SEMI decls .

    $default  reduce using rule 8 (decls)


state 30

   33 idlist: ID COMMA . idlist

    ID  shift, and go to state 24

    idlist  go to state 33


state 31

   11 funcs: FUNCTION ID $@2 L_P . params $@3 R_P COLON result_type L_K stmts R_K

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    params  go to state 34
    param   go to state 35
    type    go to state 36


state 32

   14 func_main: FUNCTION MAIN $@4 L_P . params $@5 R_P COLON type L_K stmts R_K

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    params  go to state 37
    param   go to state 35
    type    go to state 36


state 33

   33 idlist: ID COMMA idlist .

    $default  reduce using rule 33 (idlist)


state 34

   11 funcs: FUNCTION ID $@2 L_P params . $@3 R_P COLON result_type L_K stmts R_K

    $default  reduce using rule 10 ($@3)

    $@3  go to state 38


state 35

   23 params: param .
   24       | param . COMMA params

    COMMA  shift, and go to state 39

    $default  reduce using rule 23 (params)


state 36

   25 param: type . ID

    ID  shift, and go to state 40


state 37

   14 func_main: FUNCTION MAIN $@4 L_P params . $@5 R_P COLON type L_K stmts R_K

    $default  reduce using rule 13 ($@5)

    $@5  go to state 41


state 38

   11 funcs: FUNCTION ID $@2 L_P params $@3 . R_P COLON result_type L_K stmts R_K

    R_P  shift, and go to state 42


state 39

   24 params: param COMMA . params

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    params  go to state 43
    param   go to state 35
    type    go to state 36


state 40

   25 param: type ID .

    $default  reduce using rule 25 (param)


state 41

   14 func_main: FUNCTION MAIN $@4 L_P params $@5 . R_P COLON type L_K stmts R_K

    R_P  shift, and go to state 44


state 42

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P . COLON result_type L_K stmts R_K

    COLON  shift, and go to state 45


state 43

   24 params: param COMMA params .

    $default  reduce using rule 24 (params)


state 44

   14 func_main: FUNCTION MAIN $@4 L_P params $@5 R_P . COLON type L_K stmts R_K

    COLON  shift, and go to state 46


state 45

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON . result_type L_K stmts R_K

    VOID     shift, and go to state 47
    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    result_type  go to state 48
    type         go to state 49


state 46

   14 func_main: FUNCTION MAIN $@4 L_P params $@5 R_P COLON . type L_K stmts R_K

    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10

    type  go to state 50


state 47

   27 result_type: VOID .

    $default  reduce using rule 27 (result_type)


state 48

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type . L_K stmts R_K

    L_K  shift, and go to state 51


state 49

   26 result_type: type .

    $default  reduce using rule 26 (result_type)


state 50

   14 func_main: FUNCTION MAIN $@4 L_P params $@5 R_P COLON type . L_K stmts R_K

    L_K  shift, and go to state 52


state 51

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K . stmts R_K

    ID       shift, and go to state 53
    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10
    RETURN   shift, and go to state 54
    PRINT    shift, and go to state 55

    stmts   go to state 56
    stmt    go to state 57
    decl    go to state 58
    type    go to state 16
    return  go to state 59
    assign  go to state 60
    print   go to state 61


state 52

   14 func_main: FUNCTION MAIN $@4 L_P params $@5 R_P COLON type L_K . stmts R_K

    ID       shift, and go to state 53
    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10
    RETURN   shift, and go to state 54
    PRINT    shift, and go to state 55

    stmts   go to state 62
    stmt    go to state 57
    decl    go to state 58
    type    go to state 16
    return  go to state 59
    assign  go to state 60
    print   go to state 61


state 53

   35 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 63


state 54

   34 return: RETURN . expr

    ID        shift, and go to state 64
    V_NUMBER  shift, and go to state 65

    func_call  go to state 66
    expr       go to state 67
    term       go to state 68


state 55

   50 print: PRINT . L_P print_param R_P

    L_P  shift, and go to state 69


state 56

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts . R_K

    R_K  shift, and go to state 70


state 57

   16 stmts: stmt . SEMI
   17      | stmt . SEMI stmts

    SEMI  shift, and go to state 71


state 58

   19 stmt: decl .

    $default  reduce using rule 19 (stmt)


state 59

   18 stmt: return .

    $default  reduce using rule 18 (stmt)


state 60

   20 stmt: assign .

    $default  reduce using rule 20 (stmt)


state 61

   21 stmt: print .

    $default  reduce using rule 21 (stmt)


state 62

   14 func_main: FUNCTION MAIN $@4 L_P params $@5 R_P COLON type L_K stmts . R_K

    R_K  shift, and go to state 72


state 63

   35 assign: ID ASSIGN . expr

    ID        shift, and go to state 64
    V_NUMBER  shift, and go to state 65

    func_call  go to state 66
    expr       go to state 73
    term       go to state 68


state 64

   15 func_call: ID . L_P termlist R_P
   47 term: ID .

    L_P  shift, and go to state 74

    $default  reduce using rule 47 (term)


state 65

   48 term: V_NUMBER .

    $default  reduce using rule 48 (term)


state 66

   38 expr: func_call .

    $default  reduce using rule 38 (expr)


state 67

   34 return: RETURN expr .

    $default  reduce using rule 34 (return)


state 68

   36 expr: term .
   37     | term . op expr

    PLUS     shift, and go to state 75
    MINUS    shift, and go to state 76
    DIVIDE   shift, and go to state 77
    MULTY    shift, and go to state 78
    PERCENT  shift, and go to state 79
    EXP      shift, and go to state 80

    $default  reduce using rule 36 (expr)

    op  go to state 81


state 69

   50 print: PRINT L_P . print_param R_P

    V_STRING  shift, and go to state 82

    print_param  go to state 83


state 70

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K .

    $default  reduce using rule 11 (funcs)


state 71

   16 stmts: stmt SEMI .
   17      | stmt SEMI . stmts

    ID       shift, and go to state 53
    NUMBER   shift, and go to state 7
    STRING   shift, and go to state 8
    CHAR     shift, and go to state 9
    BOOLEAN  shift, and go to state 10
    RETURN   shift, and go to state 54
    PRINT    shift, and go to state 55

    $default  reduce using rule 16 (stmts)

    stmts   go to state 84
    stmt    go to state 57
    decl    go to state 58
    type    go to state 16
    return  go to state 59
    assign  go to state 60
    print   go to state 61


state 72

   14 func_main: FUNCTION MAIN $@4 L_P params $@5 R_P COLON type L_K stmts R_K .

    $default  reduce using rule 14 (func_main)


state 73

   35 assign: ID ASSIGN expr .

    $default  reduce using rule 35 (assign)


state 74

   15 func_call: ID L_P . termlist R_P

    ID        shift, and go to state 85
    V_NUMBER  shift, and go to state 65

    termlist  go to state 86
    term      go to state 87


state 75

   39 op: PLUS .

    $default  reduce using rule 39 (op)


state 76

   40 op: MINUS .

    $default  reduce using rule 40 (op)


state 77

   41 op: DIVIDE .

    $default  reduce using rule 41 (op)


state 78

   42 op: MULTY .

    $default  reduce using rule 42 (op)


state 79

   43 op: PERCENT .

    $default  reduce using rule 43 (op)


state 80

   44 op: EXP .

    $default  reduce using rule 44 (op)


state 81

   37 expr: term op . expr

    ID        shift, and go to state 64
    V_NUMBER  shift, and go to state 65

    func_call  go to state 66
    expr       go to state 88
    term       go to state 68


state 82

   49 print_param: V_STRING .

    $default  reduce using rule 49 (print_param)


state 83

   50 print: PRINT L_P print_param . R_P

    R_P  shift, and go to state 89


state 84

   17 stmts: stmt SEMI stmts .

    $default  reduce using rule 17 (stmts)


state 85

   47 term: ID .

    $default  reduce using rule 47 (term)


state 86

   15 func_call: ID L_P termlist . R_P

    R_P  shift, and go to state 90


state 87

   45 termlist: term .
   46         | term . COMMA termlist

    COMMA  shift, and go to state 91

    $default  reduce using rule 45 (termlist)


state 88

   37 expr: term op expr .

    $default  reduce using rule 37 (expr)


state 89

   50 print: PRINT L_P print_param R_P .

    $default  reduce using rule 50 (print)


state 90

   15 func_call: ID L_P termlist R_P .

    $default  reduce using rule 15 (func_call)


state 91

   46 termlist: term COMMA . termlist

    ID        shift, and go to state 85
    V_NUMBER  shift, and go to state 65

    termlist  go to state 92
    term      go to state 87


state 92

   46 termlist: term COMMA termlist .

    $default  reduce using rule 46 (termlist)
