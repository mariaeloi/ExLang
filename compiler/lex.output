Terminals unused in grammar

   V_STRING
   V_BOOLEAN
   V_CHAR
   CONST
   AND
   OR
   IF
   ELSIF
   ELSE
   DO
   WHILE
   FOR
   NE
   EQ
   GE
   LE
   GT
   LT


Grammar

    0 $accept: prog $end

    1 $@1: /* empty */

    2 prog: $@1 body

    3 body: func_main
    4     | decls func_main
    5     | funcs func_main
    6     | decls funcs func_main

    7 decls: decl SEMI
    8      | decl SEMI decls

    9 $@2: /* empty */

   10 $@3: /* empty */

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K

   12 $@4: /* empty */

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type L_K stmts R_K

   14 func_call: ID L_P termlist R_P

   15 stmts: stmt SEMI
   16      | stmt SEMI stmts

   17 stmt: return
   18     | decl
   19     | assign

   20 decl: type idlist

   21 params: param
   22       | param COMMA params

   23 param: type ID

   24 result_type: type
   25            | VOID

   26 type: NUMBER
   27     | STRING
   28     | CHAR
   29     | BOOLEAN

   30 idlist: ID
   31       | ID COMMA idlist

   32 return: RETURN expr

   33 assign: ID ASSIGN expr

   34 expr: term
   35     | term op term
   36     | func_call

   37 op: PLUS
   38   | MINUS
   39   | DIVIDE
   40   | MULTY
   41   | PERCENT
   42   | EXP

   43 termlist: term
   44         | term COMMA termlist

   45 term: ID
   46     | V_NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 11 14 23 30 31 33 45
V_STRING (259)
V_BOOLEAN (260)
V_CHAR (261)
V_NUMBER (262) 46
CONST (263)
VOID (264) 25
FUNCTION (265) 11 13
MAIN (266) 13
AND (267)
OR (268)
NUMBER (269) 26
STRING (270) 27
CHAR (271) 28
BOOLEAN (272) 29
IF (273)
ELSIF (274)
ELSE (275)
DO (276)
WHILE (277)
FOR (278)
ASSIGN (279) 33
PLUS (280) 37
MINUS (281) 38
DIVIDE (282) 39
MULTY (283) 40
PERCENT (284) 41
EXP (285) 42
NE (286)
EQ (287)
GE (288)
LE (289)
GT (290)
LT (291)
RETURN (292) 32
L_K (293) 11 13
R_K (294) 11 13
L_P (295) 11 13 14
R_P (296) 11 13 14
COLON (297) 11 13
SEMI (298) 7 8 15 16
COMMA (299) 22 31 44


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
prog (46)
    on left: 2, on right: 0
$@1 (47)
    on left: 1, on right: 2
body (48)
    on left: 3 4 5 6, on right: 2
decls (49)
    on left: 7 8, on right: 4 6 8
funcs (50)
    on left: 11, on right: 5 6
$@2 (51)
    on left: 9, on right: 11
$@3 (52)
    on left: 10, on right: 11
func_main (53)
    on left: 13, on right: 3 4 5 6
$@4 (54)
    on left: 12, on right: 13
func_call (55)
    on left: 14, on right: 36
stmts (56)
    on left: 15 16, on right: 11 13 16
stmt (57)
    on left: 17 18 19, on right: 15 16
decl (58)
    on left: 20, on right: 7 8 18
params (59)
    on left: 21 22, on right: 11 13 22
param (60)
    on left: 23, on right: 21 22
result_type (61)
    on left: 24 25, on right: 11
type (62)
    on left: 26 27 28 29, on right: 13 20 23 24
idlist (63)
    on left: 30 31, on right: 20 31
return (64)
    on left: 32, on right: 17
assign (65)
    on left: 33, on right: 19
expr (66)
    on left: 34 35 36, on right: 32 33
op (67)
    on left: 37 38 39 40 41 42, on right: 35
termlist (68)
    on left: 43 44, on right: 14 44
term (69)
    on left: 45 46, on right: 34 35 43 44


state 0

    0 $accept: . prog $end

    $default  reduce using rule 1 ($@1)

    prog  go to state 1
    $@1   go to state 2


state 1

    0 $accept: prog . $end

    $end  shift, and go to state 3


state 2

    2 prog: $@1 . body

    FUNCTION  shift, and go to state 4
    NUMBER    shift, and go to state 5
    STRING    shift, and go to state 6
    CHAR      shift, and go to state 7
    BOOLEAN   shift, and go to state 8

    body       go to state 9
    decls      go to state 10
    funcs      go to state 11
    func_main  go to state 12
    decl       go to state 13
    type       go to state 14


state 3

    0 $accept: prog $end .

    $default  accept


state 4

   11 funcs: FUNCTION . ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K
   13 func_main: FUNCTION . MAIN $@4 L_P params R_P COLON type L_K stmts R_K

    ID    shift, and go to state 15
    MAIN  shift, and go to state 16


state 5

   26 type: NUMBER .

    $default  reduce using rule 26 (type)


state 6

   27 type: STRING .

    $default  reduce using rule 27 (type)


state 7

   28 type: CHAR .

    $default  reduce using rule 28 (type)


state 8

   29 type: BOOLEAN .

    $default  reduce using rule 29 (type)


state 9

    2 prog: $@1 body .

    $default  reduce using rule 2 (prog)


state 10

    4 body: decls . func_main
    6     | decls . funcs func_main

    FUNCTION  shift, and go to state 4

    funcs      go to state 17
    func_main  go to state 18


state 11

    5 body: funcs . func_main

    FUNCTION  shift, and go to state 19

    func_main  go to state 20


state 12

    3 body: func_main .

    $default  reduce using rule 3 (body)


state 13

    7 decls: decl . SEMI
    8      | decl . SEMI decls

    SEMI  shift, and go to state 21


state 14

   20 decl: type . idlist

    ID  shift, and go to state 22

    idlist  go to state 23


state 15

   11 funcs: FUNCTION ID . $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K

    $default  reduce using rule 9 ($@2)

    $@2  go to state 24


state 16

   13 func_main: FUNCTION MAIN . $@4 L_P params R_P COLON type L_K stmts R_K

    $default  reduce using rule 12 ($@4)

    $@4  go to state 25


state 17

    6 body: decls funcs . func_main

    FUNCTION  shift, and go to state 19

    func_main  go to state 26


state 18

    4 body: decls func_main .

    $default  reduce using rule 4 (body)


state 19

   13 func_main: FUNCTION . MAIN $@4 L_P params R_P COLON type L_K stmts R_K

    MAIN  shift, and go to state 16


state 20

    5 body: funcs func_main .

    $default  reduce using rule 5 (body)


state 21

    7 decls: decl SEMI .
    8      | decl SEMI . decls

    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    $default  reduce using rule 7 (decls)

    decls  go to state 27
    decl   go to state 13
    type   go to state 14


state 22

   30 idlist: ID .
   31       | ID . COMMA idlist

    COMMA  shift, and go to state 28

    $default  reduce using rule 30 (idlist)


state 23

   20 decl: type idlist .

    $default  reduce using rule 20 (decl)


state 24

   11 funcs: FUNCTION ID $@2 . L_P params $@3 R_P COLON result_type L_K stmts R_K

    L_P  shift, and go to state 29


state 25

   13 func_main: FUNCTION MAIN $@4 . L_P params R_P COLON type L_K stmts R_K

    L_P  shift, and go to state 30


state 26

    6 body: decls funcs func_main .

    $default  reduce using rule 6 (body)


state 27

    8 decls: decl SEMI decls .

    $default  reduce using rule 8 (decls)


state 28

   31 idlist: ID COMMA . idlist

    ID  shift, and go to state 22

    idlist  go to state 31


state 29

   11 funcs: FUNCTION ID $@2 L_P . params $@3 R_P COLON result_type L_K stmts R_K

    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    params  go to state 32
    param   go to state 33
    type    go to state 34


state 30

   13 func_main: FUNCTION MAIN $@4 L_P . params R_P COLON type L_K stmts R_K

    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    params  go to state 35
    param   go to state 33
    type    go to state 34


state 31

   31 idlist: ID COMMA idlist .

    $default  reduce using rule 31 (idlist)


state 32

   11 funcs: FUNCTION ID $@2 L_P params . $@3 R_P COLON result_type L_K stmts R_K

    $default  reduce using rule 10 ($@3)

    $@3  go to state 36


state 33

   21 params: param .
   22       | param . COMMA params

    COMMA  shift, and go to state 37

    $default  reduce using rule 21 (params)


state 34

   23 param: type . ID

    ID  shift, and go to state 38


state 35

   13 func_main: FUNCTION MAIN $@4 L_P params . R_P COLON type L_K stmts R_K

    R_P  shift, and go to state 39


state 36

   11 funcs: FUNCTION ID $@2 L_P params $@3 . R_P COLON result_type L_K stmts R_K

    R_P  shift, and go to state 40


state 37

   22 params: param COMMA . params

    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    params  go to state 41
    param   go to state 33
    type    go to state 34


state 38

   23 param: type ID .

    $default  reduce using rule 23 (param)


state 39

   13 func_main: FUNCTION MAIN $@4 L_P params R_P . COLON type L_K stmts R_K

    COLON  shift, and go to state 42


state 40

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P . COLON result_type L_K stmts R_K

    COLON  shift, and go to state 43


state 41

   22 params: param COMMA params .

    $default  reduce using rule 22 (params)


state 42

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON . type L_K stmts R_K

    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    type  go to state 44


state 43

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON . result_type L_K stmts R_K

    VOID     shift, and go to state 45
    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8

    result_type  go to state 46
    type         go to state 47


state 44

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type . L_K stmts R_K

    L_K  shift, and go to state 48


state 45

   25 result_type: VOID .

    $default  reduce using rule 25 (result_type)


state 46

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type . L_K stmts R_K

    L_K  shift, and go to state 49


state 47

   24 result_type: type .

    $default  reduce using rule 24 (result_type)


state 48

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type L_K . stmts R_K

    ID       shift, and go to state 50
    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8
    RETURN   shift, and go to state 51

    stmts   go to state 52
    stmt    go to state 53
    decl    go to state 54
    type    go to state 14
    return  go to state 55
    assign  go to state 56


state 49

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K . stmts R_K

    ID       shift, and go to state 50
    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8
    RETURN   shift, and go to state 51

    stmts   go to state 57
    stmt    go to state 53
    decl    go to state 54
    type    go to state 14
    return  go to state 55
    assign  go to state 56


state 50

   33 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 58


state 51

   32 return: RETURN . expr

    ID        shift, and go to state 59
    V_NUMBER  shift, and go to state 60

    func_call  go to state 61
    expr       go to state 62
    term       go to state 63


state 52

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type L_K stmts . R_K

    R_K  shift, and go to state 64


state 53

   15 stmts: stmt . SEMI
   16      | stmt . SEMI stmts

    SEMI  shift, and go to state 65


state 54

   18 stmt: decl .

    $default  reduce using rule 18 (stmt)


state 55

   17 stmt: return .

    $default  reduce using rule 17 (stmt)


state 56

   19 stmt: assign .

    $default  reduce using rule 19 (stmt)


state 57

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts . R_K

    R_K  shift, and go to state 66


state 58

   33 assign: ID ASSIGN . expr

    ID        shift, and go to state 59
    V_NUMBER  shift, and go to state 60

    func_call  go to state 61
    expr       go to state 67
    term       go to state 63


state 59

   14 func_call: ID . L_P termlist R_P
   45 term: ID .

    L_P  shift, and go to state 68

    $default  reduce using rule 45 (term)


state 60

   46 term: V_NUMBER .

    $default  reduce using rule 46 (term)


state 61

   36 expr: func_call .

    $default  reduce using rule 36 (expr)


state 62

   32 return: RETURN expr .

    $default  reduce using rule 32 (return)


state 63

   34 expr: term .
   35     | term . op term

    PLUS     shift, and go to state 69
    MINUS    shift, and go to state 70
    DIVIDE   shift, and go to state 71
    MULTY    shift, and go to state 72
    PERCENT  shift, and go to state 73
    EXP      shift, and go to state 74

    $default  reduce using rule 34 (expr)

    op  go to state 75


state 64

   13 func_main: FUNCTION MAIN $@4 L_P params R_P COLON type L_K stmts R_K .

    $default  reduce using rule 13 (func_main)


state 65

   15 stmts: stmt SEMI .
   16      | stmt SEMI . stmts

    ID       shift, and go to state 50
    NUMBER   shift, and go to state 5
    STRING   shift, and go to state 6
    CHAR     shift, and go to state 7
    BOOLEAN  shift, and go to state 8
    RETURN   shift, and go to state 51

    $default  reduce using rule 15 (stmts)

    stmts   go to state 76
    stmt    go to state 53
    decl    go to state 54
    type    go to state 14
    return  go to state 55
    assign  go to state 56


state 66

   11 funcs: FUNCTION ID $@2 L_P params $@3 R_P COLON result_type L_K stmts R_K .

    $default  reduce using rule 11 (funcs)


state 67

   33 assign: ID ASSIGN expr .

    $default  reduce using rule 33 (assign)


state 68

   14 func_call: ID L_P . termlist R_P

    ID        shift, and go to state 77
    V_NUMBER  shift, and go to state 60

    termlist  go to state 78
    term      go to state 79


state 69

   37 op: PLUS .

    $default  reduce using rule 37 (op)


state 70

   38 op: MINUS .

    $default  reduce using rule 38 (op)


state 71

   39 op: DIVIDE .

    $default  reduce using rule 39 (op)


state 72

   40 op: MULTY .

    $default  reduce using rule 40 (op)


state 73

   41 op: PERCENT .

    $default  reduce using rule 41 (op)


state 74

   42 op: EXP .

    $default  reduce using rule 42 (op)


state 75

   35 expr: term op . term

    ID        shift, and go to state 77
    V_NUMBER  shift, and go to state 60

    term  go to state 80


state 76

   16 stmts: stmt SEMI stmts .

    $default  reduce using rule 16 (stmts)


state 77

   45 term: ID .

    $default  reduce using rule 45 (term)


state 78

   14 func_call: ID L_P termlist . R_P

    R_P  shift, and go to state 81


state 79

   43 termlist: term .
   44         | term . COMMA termlist

    COMMA  shift, and go to state 82

    $default  reduce using rule 43 (termlist)


state 80

   35 expr: term op term .

    $default  reduce using rule 35 (expr)


state 81

   14 func_call: ID L_P termlist R_P .

    $default  reduce using rule 14 (func_call)


state 82

   44 termlist: term COMMA . termlist

    ID        shift, and go to state 77
    V_NUMBER  shift, and go to state 60

    termlist  go to state 83
    term      go to state 79


state 83

   44 termlist: term COMMA termlist .

    $default  reduce using rule 44 (termlist)
