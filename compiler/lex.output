Terminals unused in grammar

   CONST
   DO
   WHILE
   FOR
   IF
   ELSIF
   ELSE
   STRING
   CHAR
   BOOLEAN
   V_STRING
   V_CHAR
   V_BOOLEAN
   AND
   OR
   DIVIDE
   NE
   EQ
   GE
   LE
   GT
   LT
   VOID
   MULTY
   PERCENT


Grammar

    0 $accept: prog $end

    1 $@1: /* empty */

    2 prog: $@1 decls funcs func_main

    3 decls: decl SEMI
    4      | decl SEMI decls

    5 params: param
    6       | param COMMA params

    7 funcs: FUNCTION ID L_P params R_P COLON type L_K stmts R_K

    8 $@2: /* empty */

    9 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type L_K stmts R_K

   10 $@3: /* empty */

   11 func_call: ID $@3 L_P termlist R_P

   12 stmts: stmt SEMI
   13      | stmt SEMI stmts

   14 stmt: return
   15     | decl
   16     | assign

   17 decl: type idlist

   18 param: type ID

   19 type: NUMBER

   20 idlist: ID
   21       | ID COMMA idlist

   22 return: RETURN expr

   23 assign: ID ASSIGN expr

   24 expr: term
   25     | ID op ID
   26     | func_call

   27 op: PLUS
   28   | MINUS

   29 termlist: term
   30         | term COMMA termlist

   31 term: ID
   32     | V_NUMBER


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 7 11 18 20 21 23 25 31
NUMBER (259) 19
COLON (260) 7 9
FUNCTION (261) 7 9
CONST (262)
L_K (263) 7 9
R_K (264) 7 9
L_P (265) 7 9 11
R_P (266) 7 9 11
DO (267)
WHILE (268)
FOR (269)
IF (270)
ELSIF (271)
ELSE (272)
SEMI (273) 3 4 12 13
ASSIGN (274) 23
STRING (275)
CHAR (276)
BOOLEAN (277)
V_STRING (278)
V_NUMBER (279) 32
V_CHAR (280)
V_BOOLEAN (281)
AND (282)
OR (283)
PLUS (284) 27
MINUS (285) 28
DIVIDE (286)
NE (287)
EQ (288)
GE (289)
LE (290)
GT (291)
LT (292)
VOID (293)
RETURN (294) 22
COMMA (295) 6 21 30
MAIN (296) 9
MULTY (297)
PERCENT (298)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
prog (45)
    on left: 2, on right: 0
$@1 (46)
    on left: 1, on right: 2
decls (47)
    on left: 3 4, on right: 2 4
params (48)
    on left: 5 6, on right: 6 7 9
funcs (49)
    on left: 7, on right: 2
func_main (50)
    on left: 9, on right: 2
$@2 (51)
    on left: 8, on right: 9
func_call (52)
    on left: 11, on right: 26
$@3 (53)
    on left: 10, on right: 11
stmts (54)
    on left: 12 13, on right: 7 9 13
stmt (55)
    on left: 14 15 16, on right: 12 13
decl (56)
    on left: 17, on right: 3 4 15
param (57)
    on left: 18, on right: 5 6
type (58)
    on left: 19, on right: 7 9 17 18
idlist (59)
    on left: 20 21, on right: 17 21
return (60)
    on left: 22, on right: 14
assign (61)
    on left: 23, on right: 16
expr (62)
    on left: 24 25 26, on right: 22 23
op (63)
    on left: 27 28, on right: 25
termlist (64)
    on left: 29 30, on right: 11 30
term (65)
    on left: 31 32, on right: 24 29 30


state 0

    0 $accept: . prog $end

    $default  reduce using rule 1 ($@1)

    prog  go to state 1
    $@1   go to state 2


state 1

    0 $accept: prog . $end

    $end  shift, and go to state 3


state 2

    2 prog: $@1 . decls funcs func_main

    NUMBER  shift, and go to state 4

    decls  go to state 5
    decl   go to state 6
    type   go to state 7


state 3

    0 $accept: prog $end .

    $default  accept


state 4

   19 type: NUMBER .

    $default  reduce using rule 19 (type)


state 5

    2 prog: $@1 decls . funcs func_main

    FUNCTION  shift, and go to state 8

    funcs  go to state 9


state 6

    3 decls: decl . SEMI
    4      | decl . SEMI decls

    SEMI  shift, and go to state 10


state 7

   17 decl: type . idlist

    ID  shift, and go to state 11

    idlist  go to state 12


state 8

    7 funcs: FUNCTION . ID L_P params R_P COLON type L_K stmts R_K

    ID  shift, and go to state 13


state 9

    2 prog: $@1 decls funcs . func_main

    FUNCTION  shift, and go to state 14

    func_main  go to state 15


state 10

    3 decls: decl SEMI .
    4      | decl SEMI . decls

    NUMBER  shift, and go to state 4

    $default  reduce using rule 3 (decls)

    decls  go to state 16
    decl   go to state 6
    type   go to state 7


state 11

   20 idlist: ID .
   21       | ID . COMMA idlist

    COMMA  shift, and go to state 17

    $default  reduce using rule 20 (idlist)


state 12

   17 decl: type idlist .

    $default  reduce using rule 17 (decl)


state 13

    7 funcs: FUNCTION ID . L_P params R_P COLON type L_K stmts R_K

    L_P  shift, and go to state 18


state 14

    9 func_main: FUNCTION . MAIN $@2 L_P params R_P COLON type L_K stmts R_K

    MAIN  shift, and go to state 19


state 15

    2 prog: $@1 decls funcs func_main .

    $default  reduce using rule 2 (prog)


state 16

    4 decls: decl SEMI decls .

    $default  reduce using rule 4 (decls)


state 17

   21 idlist: ID COMMA . idlist

    ID  shift, and go to state 11

    idlist  go to state 20


state 18

    7 funcs: FUNCTION ID L_P . params R_P COLON type L_K stmts R_K

    NUMBER  shift, and go to state 4

    params  go to state 21
    param   go to state 22
    type    go to state 23


state 19

    9 func_main: FUNCTION MAIN . $@2 L_P params R_P COLON type L_K stmts R_K

    $default  reduce using rule 8 ($@2)

    $@2  go to state 24


state 20

   21 idlist: ID COMMA idlist .

    $default  reduce using rule 21 (idlist)


state 21

    7 funcs: FUNCTION ID L_P params . R_P COLON type L_K stmts R_K

    R_P  shift, and go to state 25


state 22

    5 params: param .
    6       | param . COMMA params

    COMMA  shift, and go to state 26

    $default  reduce using rule 5 (params)


state 23

   18 param: type . ID

    ID  shift, and go to state 27


state 24

    9 func_main: FUNCTION MAIN $@2 . L_P params R_P COLON type L_K stmts R_K

    L_P  shift, and go to state 28


state 25

    7 funcs: FUNCTION ID L_P params R_P . COLON type L_K stmts R_K

    COLON  shift, and go to state 29


state 26

    6 params: param COMMA . params

    NUMBER  shift, and go to state 4

    params  go to state 30
    param   go to state 22
    type    go to state 23


state 27

   18 param: type ID .

    $default  reduce using rule 18 (param)


state 28

    9 func_main: FUNCTION MAIN $@2 L_P . params R_P COLON type L_K stmts R_K

    NUMBER  shift, and go to state 4

    params  go to state 31
    param   go to state 22
    type    go to state 23


state 29

    7 funcs: FUNCTION ID L_P params R_P COLON . type L_K stmts R_K

    NUMBER  shift, and go to state 4

    type  go to state 32


state 30

    6 params: param COMMA params .

    $default  reduce using rule 6 (params)


state 31

    9 func_main: FUNCTION MAIN $@2 L_P params . R_P COLON type L_K stmts R_K

    R_P  shift, and go to state 33


state 32

    7 funcs: FUNCTION ID L_P params R_P COLON type . L_K stmts R_K

    L_K  shift, and go to state 34


state 33

    9 func_main: FUNCTION MAIN $@2 L_P params R_P . COLON type L_K stmts R_K

    COLON  shift, and go to state 35


state 34

    7 funcs: FUNCTION ID L_P params R_P COLON type L_K . stmts R_K

    ID      shift, and go to state 36
    NUMBER  shift, and go to state 4
    RETURN  shift, and go to state 37

    stmts   go to state 38
    stmt    go to state 39
    decl    go to state 40
    type    go to state 7
    return  go to state 41
    assign  go to state 42


state 35

    9 func_main: FUNCTION MAIN $@2 L_P params R_P COLON . type L_K stmts R_K

    NUMBER  shift, and go to state 4

    type  go to state 43


state 36

   23 assign: ID . ASSIGN expr

    ASSIGN  shift, and go to state 44


state 37

   22 return: RETURN . expr

    ID        shift, and go to state 45
    V_NUMBER  shift, and go to state 46

    func_call  go to state 47
    expr       go to state 48
    term       go to state 49


state 38

    7 funcs: FUNCTION ID L_P params R_P COLON type L_K stmts . R_K

    R_K  shift, and go to state 50


state 39

   12 stmts: stmt . SEMI
   13      | stmt . SEMI stmts

    SEMI  shift, and go to state 51


state 40

   15 stmt: decl .

    $default  reduce using rule 15 (stmt)


state 41

   14 stmt: return .

    $default  reduce using rule 14 (stmt)


state 42

   16 stmt: assign .

    $default  reduce using rule 16 (stmt)


state 43

    9 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type . L_K stmts R_K

    L_K  shift, and go to state 52


state 44

   23 assign: ID ASSIGN . expr

    ID        shift, and go to state 45
    V_NUMBER  shift, and go to state 46

    func_call  go to state 47
    expr       go to state 53
    term       go to state 49


state 45

   11 func_call: ID . $@3 L_P termlist R_P
   25 expr: ID . op ID
   31 term: ID .

    PLUS   shift, and go to state 54
    MINUS  shift, and go to state 55

    SEMI      reduce using rule 31 (term)
    $default  reduce using rule 10 ($@3)

    $@3  go to state 56
    op   go to state 57


state 46

   32 term: V_NUMBER .

    $default  reduce using rule 32 (term)


state 47

   26 expr: func_call .

    $default  reduce using rule 26 (expr)


state 48

   22 return: RETURN expr .

    $default  reduce using rule 22 (return)


state 49

   24 expr: term .

    $default  reduce using rule 24 (expr)


state 50

    7 funcs: FUNCTION ID L_P params R_P COLON type L_K stmts R_K .

    $default  reduce using rule 7 (funcs)


state 51

   12 stmts: stmt SEMI .
   13      | stmt SEMI . stmts

    ID      shift, and go to state 36
    NUMBER  shift, and go to state 4
    RETURN  shift, and go to state 37

    $default  reduce using rule 12 (stmts)

    stmts   go to state 58
    stmt    go to state 39
    decl    go to state 40
    type    go to state 7
    return  go to state 41
    assign  go to state 42


state 52

    9 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type L_K . stmts R_K

    ID      shift, and go to state 36
    NUMBER  shift, and go to state 4
    RETURN  shift, and go to state 37

    stmts   go to state 59
    stmt    go to state 39
    decl    go to state 40
    type    go to state 7
    return  go to state 41
    assign  go to state 42


state 53

   23 assign: ID ASSIGN expr .

    $default  reduce using rule 23 (assign)


state 54

   27 op: PLUS .

    $default  reduce using rule 27 (op)


state 55

   28 op: MINUS .

    $default  reduce using rule 28 (op)


state 56

   11 func_call: ID $@3 . L_P termlist R_P

    L_P  shift, and go to state 60


state 57

   25 expr: ID op . ID

    ID  shift, and go to state 61


state 58

   13 stmts: stmt SEMI stmts .

    $default  reduce using rule 13 (stmts)


state 59

    9 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type L_K stmts . R_K

    R_K  shift, and go to state 62


state 60

   11 func_call: ID $@3 L_P . termlist R_P

    ID        shift, and go to state 63
    V_NUMBER  shift, and go to state 46

    termlist  go to state 64
    term      go to state 65


state 61

   25 expr: ID op ID .

    $default  reduce using rule 25 (expr)


state 62

    9 func_main: FUNCTION MAIN $@2 L_P params R_P COLON type L_K stmts R_K .

    $default  reduce using rule 9 (func_main)


state 63

   31 term: ID .

    $default  reduce using rule 31 (term)


state 64

   11 func_call: ID $@3 L_P termlist . R_P

    R_P  shift, and go to state 66


state 65

   29 termlist: term .
   30         | term . COMMA termlist

    COMMA  shift, and go to state 67

    $default  reduce using rule 29 (termlist)


state 66

   11 func_call: ID $@3 L_P termlist R_P .

    $default  reduce using rule 11 (func_call)


state 67

   30 termlist: term COMMA . termlist

    ID        shift, and go to state 63
    V_NUMBER  shift, and go to state 46

    termlist  go to state 68
    term      go to state 65


state 68

   30 termlist: term COMMA termlist .

    $default  reduce using rule 30 (termlist)
